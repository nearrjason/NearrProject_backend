package com.meitaomart.cart.controller;

import java.util.ArrayList;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.meitaomart.cart.builder.CartItemBuilder;
import com.meitaomart.cart.pojo.CartItem;
import com.meitaomart.cart.service.CartService;
import com.meitaomart.common.pojo.ItemInfo;
import com.meitaomart.common.utils.CookieUtils;
import com.meitaomart.common.utils.MeitaoResult;
import com.meitaomart.common.utils.JsonUtils;
import com.meitaomart.pojo.MeitaoItem;
import com.meitaomart.pojo.MeitaoUser;
import com.meitaomart.service.ItemService;

/**
 * 购物车处理Controller
 */
@Controller
public class CartController {

	@Value("${COOKIE_CART_EXPIRE}")
	private Integer COOKIE_CART_EXPIRE;

	@Autowired
	private ItemService itemService;
	@Autowired
	private CartService cartService;

	@RequestMapping("/cart/add/{itemId}")
	public String addCart(@PathVariable Long itemId, @RequestParam(defaultValue = "1") Integer purchaseQuantity,
			HttpServletRequest request, HttpServletResponse response) {
		// 判断用户是否登录
		MeitaoUser user = (MeitaoUser) request.getAttribute("user");
		// 如果是登录状态，把购物车写入redis
		if (user != null) {
			// 保存到服务端
			cartService.addCart(user.getId(), itemId, purchaseQuantity);
			// 返回逻辑视图
			return "cartSuccess";
		}
		// 如果未登录使用cookie
		// 从cookie中取购物车列表
		List<CartItem> cartItemList = getCartListFromCookie(request);
		// 判断商品在商品列表中是否存在
		boolean flag = false;
		for (CartItem cartItem : cartItemList) {
			// 如果存在数量相加
			if (cartItem.getId() == itemId.longValue()) {
				flag = true;
				// 找到商品，数量相加(这里的num其实是库存里的num,
				// 而由于此时我们只在cookie中存储，我们暂时借用num这个属性来表示购物车里的数量)
				cartItem.setPurchaseQuantity(cartItem.getPurchaseQuantity() + purchaseQuantity);
				// 跳出循环
				break;
			}
		}
		// 如果不存在
		if (!flag) {
			// 根据商品id查询商品信息。得到一个MeitaoItem对象
			ItemInfo itemInfo = itemService.getItemById(itemId);
			CartItem cartItem = getCartItem(itemInfo, purchaseQuantity);
			// 把商品添加到商品列表
			cartItemList.add(cartItem);
		}
		// 写入cookie
		CookieUtils.setCookie(request, response, "cart", JsonUtils.objectToJson(cartItemList), COOKIE_CART_EXPIRE, true);
		// 返回添加成功页面
		return "cartSuccess";
	}
	
	/**
	 * 此处决定购物车显示哪些信息
	 * @param itemInfo
	 * @return
	 */
	private CartItem getCartItem(ItemInfo itemInfo, Integer purchaseQuantity) {
		CartItem cartItem = CartItemBuilder.getInstance()
		.setName(itemInfo.getName())
		.setSalePrice(itemInfo.getSalePrice())
		.setImages(itemInfo.getImages())
		.setPurchaseQuantity(purchaseQuantity)
		.build();
		
		return cartItem;
	}

	/**
	 * 从cookie中取购物车列表的处理
	 * <p>
	 * Title: getCartListFromCookie
	 * </p>
	 * <p>
	 * Description:
	 * </p>
	 * 
	 * @param request
	 * @return
	 */
	private List<CartItem> getCartListFromCookie(HttpServletRequest request) {
		String json = CookieUtils.getCookieValue(request, "cart", true);
		// 判断json是否为空
		if (StringUtils.isBlank(json)) {
			return new ArrayList<>();
		}
		// 把json转换成商品列表
		List<CartItem> list = JsonUtils.jsonToList(json, CartItem.class);
		return list;
	}

	/**
	 * 展示购物车列表
	 * <p>
	 * Title: showCatList
	 * </p>
	 * <p>
	 * Description:
	 * </p>
	 * 
	 * @param request
	 * @return
	 */
	@RequestMapping("/cart/cart")
	public String showCatList(HttpServletRequest request, HttpServletResponse response) {
		// 从cookie中取购物车列表
		List<CartItem> cartItemList = getCartListFromCookie(request);
		// 判断用户是否为登录状态
		MeitaoUser user = (MeitaoUser) request.getAttribute("user");
		// 如果是登录状态
		if (user != null) {
			// 从cookie中取购物车列表
			// 如果不为空，把cookie中的购物车商品和服务端的购物车商品合并。
			cartService.mergeCart(user.getId(), cartItemList);
			// 把cookie中的购物车删除
			CookieUtils.deleteCookie(request, response, "cart");
			// 从服务端取购物车列表
			cartItemList = cartService.getCartList(user.getId());

		}
		// 把列表传递给页面
		request.setAttribute("cartItemList", cartItemList);
		// 返回逻辑视图
		return "cart";
	}

	/**
	 * 更新购物车商品数量
	 */
	@RequestMapping("/cart/update/num/{itemId}/{num}")
	@ResponseBody
	public MeitaoResult updateCartNum(@PathVariable Long itemId, @PathVariable Integer purchaseQuantity, HttpServletRequest request,
			HttpServletResponse response) {
		// 判断用户是否为登录状态
		MeitaoUser user = (MeitaoUser) request.getAttribute("user");
		if (user != null) {
			cartService.updateCartPurchaseQuantity(user.getId(), itemId, purchaseQuantity);
			return MeitaoResult.ok();
		}
		// 从cookie中取购物车列表
		List<CartItem> cartItemList = getCartListFromCookie(request);
		// 遍历商品列表找到对应的商品
		for (CartItem cartItem : cartItemList) {
			if (cartItem.getId().longValue() == itemId) {
				// 更新数量
				cartItem.setStockNumber(purchaseQuantity);
				break;
			}
		}
		// 把购物车列表写回cookie
		CookieUtils.setCookie(request, response, "cart", JsonUtils.objectToJson(cartItemList), COOKIE_CART_EXPIRE, true);
		// 返回成功
		return MeitaoResult.ok();
	}

	/**
	 * 删除购物车商品
	 */
	@RequestMapping("/cart/delete/{itemId}")
	public String deleteCartItem(@PathVariable Long itemId, HttpServletRequest request, HttpServletResponse response) {
		MeitaoUser user = (MeitaoUser) request.getAttribute("user");
		// 从cookie中取购物车列表
		List<CartItem> cartItemList = getCartListFromCookie(request);
		cartItemList = deleteCartItemHelper(itemId, user, cartItemList);
		// 把购物车列表写入cookie
		CookieUtils.setCookie(request, response, "cart", JsonUtils.objectToJson(cartItemList), COOKIE_CART_EXPIRE, true);
		// 返回逻辑视图
		return "redirect:/cart/cart.html";
	}

	/**
	 * 删除购物车商品
	 */
	@RequestMapping("/cart/delete/multiple/{itemIds}")
	public String deleteCartItems(@PathVariable String itemIds, HttpServletRequest request,
			HttpServletResponse response) {
		MeitaoUser user = (MeitaoUser) request.getAttribute("user");
		// 从cookie中取购物车列表
		List<CartItem> cartItemList = getCartListFromCookie(request);
		String[] itemIdsArray = itemIds.split(",");
		for (String stringId : itemIdsArray) {
			Long itemId = Long.parseLong(stringId.trim());
			cartItemList = deleteCartItemHelper(itemId, user, cartItemList);
		}
		// 把购物车列表写入cookie
		CookieUtils.setCookie(request, response, "cart", JsonUtils.objectToJson(cartItemList), COOKIE_CART_EXPIRE, true);
		// 返回逻辑视图
		return "redirect:/cart/cart.html";
	}

	private List<CartItem> deleteCartItemHelper(Long itemId, MeitaoUser user, List<CartItem> cartItemList) {
		// 判断用户是否为登录状态
		if (user != null) {
			cartService.deleteCartItem(user.getId(), itemId);
		} else {
			// 遍历列表，找到要删除的商品
			for (CartItem cartItem : cartItemList) {
				if (cartItem.getId().longValue() == itemId) {
					// 删除商品
					cartItemList.remove(cartItem);
					// 跳出循环
					break;
				}
			}
		}

		return cartItemList;
	}
}
