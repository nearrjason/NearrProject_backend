package com.meitaomart.service.impl;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.meitaomart.common.pojo.EasyUITreeNode;
import com.meitaomart.common.utils.MeitaoResult;
import com.meitaomart.content.pojo.ItemCategoryList;
import com.meitaomart.mapper.MeitaoItemCategoryMapper;
import com.meitaomart.pojo.MeitaoItemCategory;
import com.meitaomart.pojo.MeitaoItemCategoryExample;
import com.meitaomart.pojo.MeitaoItemCategoryExample.Criteria;
import com.meitaomart.service.ItemCategoryService;

/**
 * 商品分类管理
 * 
 * @author anluo
 *
 */

@Service
public class ItemCategoryServiceImpl implements ItemCategoryService {

	@Autowired
	private MeitaoItemCategoryMapper itemCategoryMapper;

	@Override
	public List<EasyUITreeNode> getItemCategoryListEasyUI(long parentId) {
		List<MeitaoItemCategory> list = getItemCategoryList(parentId);
		// 创建返回结果List
		List<EasyUITreeNode> resultList = new ArrayList<>();
		// 把列表转换成EasyUITreeNode列表
		for (MeitaoItemCategory meitaoItemCategory : list) {
			EasyUITreeNode node = new EasyUITreeNode();
			node.setId(meitaoItemCategory.getId());
			node.setText(meitaoItemCategory.getName());
			node.setState(meitaoItemCategory.getIsParent() ? "closed" : "open");
			// 添加到结果列表
			resultList.add(node);
		}
		// 返回结果
		return resultList;
	}

	@Override
	public MeitaoResult addItemCategory(long parentId, String name) {
		MeitaoItemCategory itemCategory = new MeitaoItemCategory();
		// 设置pojo的属性
		itemCategory.setParentId(parentId);
		itemCategory.setName(name);
		// 1(正常), 2(刪除)
		itemCategory.setStatus(1);
		// 默認排序是1
		itemCategory.setSortOrder(1);
		// 新添加的節點一定是葉子節點
		itemCategory.setIsParent(false);
		itemCategory.setCreatedTime(new Date());
		itemCategory.setUpdatedTime(new Date());

		// 插入到数据库
		itemCategoryMapper.insert(itemCategory);

		// 判断父节点的isparent属性，如果不是true改为true
		// 根據parentid查詢父節點
		MeitaoItemCategory parent = itemCategoryMapper.selectByPrimaryKey(parentId);
		if (!parent.getIsParent()) {
			parent.setIsParent(true);
			// 更新到數據庫中
			itemCategoryMapper.updateByPrimaryKey(parent);
		}

		// 返回结果，返回MeitaoResult, 包含pojo
		return MeitaoResult.ok(itemCategory);
	}

	@Override
	public MeitaoResult updateItemCategory(long id, String name) {
		// TODO Auto-generated method stub
		MeitaoItemCategory current = itemCategoryMapper.selectByPrimaryKey(id);
		current.setName(name);
		itemCategoryMapper.updateByPrimaryKey(current);
		return MeitaoResult.ok(current);
	}

	@Override
	public MeitaoResult deleteItemCategory(long id) {
		// 根据parentId查询子节点列表
		MeitaoItemCategoryExample example = new MeitaoItemCategoryExample();
		Criteria criteria = example.createCriteria();
		// 设置查询条件
		criteria.andParentIdEqualTo(id);
		// 查询子节点个数
		int numberOfNodes = itemCategoryMapper.countByExample(example);

		if (numberOfNodes == 0) {
			Long parentId = itemCategoryMapper.selectByPrimaryKey(id).getParentId();
			itemCategoryMapper.deleteByPrimaryKey(id);

			if (isEmptyParent(parentId)) {
				MeitaoItemCategory parent = itemCategoryMapper.selectByPrimaryKey(parentId);
				parent.setIsParent(false);
				// 更新到数据库
				itemCategoryMapper.updateByPrimaryKey(parent);
			}

			return MeitaoResult.ok();
		} else {
			return MeitaoResult.build(null, "Cannot delete a non empty directory");
		}
	}

	private boolean isEmptyParent(long id) {
		MeitaoItemCategoryExample example = new MeitaoItemCategoryExample();
		Criteria criteria = example.createCriteria();
		// 设置查询条件
		criteria.andParentIdEqualTo(id);
		// 查询子节点个数
		return itemCategoryMapper.countByExample(example) == 0;
	}

	@Override
	public List<MeitaoItemCategory> getItemCategoryList(long parentId) {
		// 根据parentId查询子节点列表
		MeitaoItemCategoryExample example = new MeitaoItemCategoryExample();
		Criteria criteria = example.createCriteria();
		// 设置查询条件
		criteria.andParentIdEqualTo(parentId);
		// 执行查询
		List<MeitaoItemCategory> list = itemCategoryMapper.selectByExample(example);
		return list;
	}

	@Override
	public List<ItemCategoryList> getItemCategoryListWithChildrenList(long parentId) {
		// TODO Auto-generated method stub
		List<ItemCategoryList> currentResult = new ArrayList<>();
		List<MeitaoItemCategory> list = getItemCategoryList(parentId);

		for (MeitaoItemCategory meitaoItem : list) {
			ItemCategoryList itemWithChildrenList = new ItemCategoryList();

			itemWithChildrenList.setId(meitaoItem.getId());
			itemWithChildrenList.setParentId(meitaoItem.getParentId());
			itemWithChildrenList.setName(meitaoItem.getName());
			itemWithChildrenList.setStatus(meitaoItem.getStatus());
			itemWithChildrenList.setSortOrder(meitaoItem.getSortOrder());
			itemWithChildrenList.setIsParent(meitaoItem.getIsParent());
			itemWithChildrenList.setCreatedTime(meitaoItem.getCreatedTime());
			itemWithChildrenList.setUpdatedTime(meitaoItem.getUpdatedTime());
			itemWithChildrenList.setChildrenList(getItemCategoryListWithChildrenList(meitaoItem.getId()));

			currentResult.add(itemWithChildrenList);
		}

		return currentResult;
	}

	@Override
	public Long getParentCategoryId(Long categoryId) {
		if (categoryId == null) {
			return null;
		}
		
		MeitaoItemCategory itemCategory = itemCategoryMapper.selectByPrimaryKey(categoryId);
		if (itemCategory != null) {
			Long parentId = itemCategory.getParentId();
		}
		if (categoryId != null) {
			MeitaoItemCategory levelThreeItemCategory = itemCategoryMapper.selectByPrimaryKey(categoryId);
			if (levelThreeItemCategory != null) {
				Long levelTwoCategoryId = levelThreeItemCategory.getParentId();
				if ()
			}
		}
		
		
		
		return null;
	}
}
