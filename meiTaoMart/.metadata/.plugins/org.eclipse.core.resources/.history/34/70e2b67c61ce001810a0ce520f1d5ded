package com.meitaomart.app.cart;

import java.util.ArrayList;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.converter.json.MappingJacksonValue;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.apache.commons.lang3.StringUtils;

import com.meitaomart.cart.service.CartService;
import com.meitaomart.common.builder.CartItemBuilder;
import com.meitaomart.common.pojo.CartItem;
import com.meitaomart.common.pojo.ItemInfo;
import com.meitaomart.common.utils.CookieUtils;
import com.meitaomart.common.utils.JsonUtils;
import com.meitaomart.common.utils.MeitaoResult;
import com.meitaomart.pojo.MeitaoUser;
import com.meitaomart.service.ItemService;

public class AddCard {
	@Value("${COOKIE_CART_EXPIRE}")
    private Integer COOKIE_CART_EXPIRE;

    @Autowired
    private ItemService itemService;
    @Autowired
    private CartService cartService;


    // ResponseBody
    @RequestMapping("/cart/add/{itemId}")
    @ResponseBody
    public Object addCart(@PathVariable Long itemId, @RequestParam(defaultValue = "1") Integer purchaseQuantity,
                          String callback, HttpServletRequest request, HttpServletResponse response) {
        // 判断用户是否登录
        MeitaoUser user = (MeitaoUser) request.getAttribute("user");
        MeitaoResult result = MeitaoResult.ok();
        // 如果是登录状态，把购物车写入redis
        if (user != null) {
            // 保存到服务端
            cartService.addCart(user.getId(), itemId, purchaseQuantity);
            if (StringUtils.isNotBlank(callback)) {
                //把结果封装成一个js语句响应
                MappingJacksonValue mappingJacksonValue = new MappingJacksonValue(result);
                mappingJacksonValue.setJsonpFunction(callback);
                return mappingJacksonValue;
            }
            // 返回逻辑视图
            return result;
        }
        // 如果未登录使用cookie
        // 从cookie中取购物车列表
        List<CartItem> cartItemList = getCartListFromCookie(request);
        // 判断商品在商品列表中是否存在
        boolean flag = false;
        for (CartItem cartItem : cartItemList) {
            // 如果存在数量相加
            if (cartItem.getId() == itemId.longValue()) {
                flag = true;
                // 找到商品，数量相加(这里的num其实是库存里的num,
                // 而由于此时我们只在cookie中存储，我们暂时借用num这个属性来表示购物车里的数量)
                cartItem.setPurchaseQuantity(cartItem.getPurchaseQuantity() + purchaseQuantity);
                // 跳出循环
                break;
            }
        }
        // 如果不存在
        if (!flag) {
            // 根据商品id查询商品信息。得到一个ItemInfo对象
            ItemInfo itemInfo = itemService.getItemById(itemId);
            CartItem cartItem = CartItemBuilder.getCartItem(itemInfo, purchaseQuantity);
            // 把商品添加到商品列表
            cartItemList.add(cartItem);
        }
        // 写入cookie
        CookieUtils.setCookie(request, response, "cart", JsonUtils.objectToJson(cartItemList), COOKIE_CART_EXPIRE, true);
        // 返回添加成功页面
        if (StringUtils.isNotBlank(callback)) {
            //把结果封装成一个js语句响应
            MappingJacksonValue mappingJacksonValue = new MappingJacksonValue(result);
            mappingJacksonValue.setJsonpFunction(callback);
            return mappingJacksonValue;
        }
        return result;
    }

    /**
     * 从cookie中取购物车列表的处理
     * <p>
     * Title: getCartListFromCookie
     * </p>
     * <p>
     * Description:
     * </p>
     *
     * @param request
     * @return
     */
    private List<CartItem> getCartListFromCookie(HttpServletRequest request) {
        String json = CookieUtils.getCookieValue(request, "cart", true);
        // 判断json是否为空
        if (StringUtils.isBlank(json)) {
            return new ArrayList<>();
        }
        // 把json转换成商品列表
        List<CartItem> list = JsonUtils.jsonToList(json, CartItem.class);
        return list;
    }
}
