package com.meitaomart.order.service.impl;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.Date;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import org.omg.CORBA.PRIVATE_MEMBER;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;

import com.github.pagehelper.PageHelper;
import com.github.pagehelper.PageInfo;
import com.meitaomart.common.jedis.JedisClient;
import com.meitaomart.common.pojo.CartItem;
import com.meitaomart.common.pojo.EasyUIDataGridResult;
import com.meitaomart.common.pojo.ItemInfo;
import com.meitaomart.common.utils.JsonUtils;
import com.meitaomart.common.utils.MeitaoResult;
import com.meitaomart.common.utils.PaymentUtils;
import com.meitaomart.common.utils.ShippingUtils;
import com.meitaomart.common.utils.TaxUtils;
import com.meitaomart.mapper.MeitaoAddressMapper;
import com.meitaomart.mapper.MeitaoBankingCardMapper;
import com.meitaomart.mapper.MeitaoItemMapper;
import com.meitaomart.mapper.MeitaoItemPriceMapper;
import com.meitaomart.mapper.MeitaoOrderItemMapper;
import com.meitaomart.mapper.MeitaoOrderMapper;
import com.meitaomart.order.builder.OrderInfoBuilder;
import com.meitaomart.order.pojo.OrderInfo;
import com.meitaomart.order.service.OrderService;
import com.meitaomart.pojo.MeitaoAddress;
import com.meitaomart.pojo.MeitaoAddressExample;
import com.meitaomart.pojo.MeitaoAddressExample.Criteria;
import com.meitaomart.pojo.MeitaoBankingCard;
import com.meitaomart.pojo.MeitaoBankingCardExample;
import com.meitaomart.pojo.MeitaoItemPrice;
import com.meitaomart.pojo.MeitaoOrder;
import com.meitaomart.pojo.MeitaoOrderExample;
import com.meitaomart.pojo.MeitaoOrderItem;
import com.meitaomart.pojo.MeitaoOrderItemExample;
import com.meitaomart.pojo.MeitaoUser;

/**
 * 订单处理服务
 * 
 * @version 1.0
 */
@Service
public class OrderServiceImpl implements OrderService {

	@Autowired
	private MeitaoItemMapper itemMapper;
	@Autowired
	private MeitaoOrderMapper orderMapper;
	@Autowired
	private MeitaoOrderItemMapper orderItemMapper;
	@Autowired
	private MeitaoAddressMapper addressMapper;
	@Autowired
	private MeitaoBankingCardMapper cardMapper;
	@Autowired
	private MeitaoItemPriceMapper itemPriceMapper;
	@Autowired
	private JedisClient jedisClient;

	@Value("${ORDER_ID_GEN_KEY}")
	private String ORDER_ID_GEN_KEY;
	@Value("${ORDER_ID_START}")
	private String ORDER_ID_START;
	@Value("${ORDER_DETAIL_ID_GEN_KEY}")
	private String ORDER_DETAIL_ID_GEN_KEY;
	@Value("${DEFAULT_COUNTRY}")
	private String DEFAULT_COUNTRY;
	@Value("${REDIS_CART_PRE}")
	private String REDIS_CART_PRE;
	
	@Override
	public MeitaoResult createOrder(OrderInfo orderInfo, MeitaoAddress address, MeitaoUser user) {
		/**
		 * orderInfo信息完善
		 */
		// 生成订单号。使用redis的incr生成。
		if (!jedisClient.exists(ORDER_ID_GEN_KEY)) {
			jedisClient.set(ORDER_ID_GEN_KEY, ORDER_ID_START);
		}

		Long orderId = jedisClient.incr(ORDER_ID_GEN_KEY);
		// 补全orderInfo的属性
		orderInfo.setId(orderId);
		// 1、未发货，2、已发货
		orderInfo.setStatus((byte) 1);
		// 1、2、3
		orderInfo.setPaymentType((byte) 1);
		orderInfo.setCreatedTime(new Date());
		orderInfo.setUpdatedTime(new Date());
		// 第一期我们认为， 产生订单即支付
		orderInfo.setPaymentTime(new Date());
		// 把用户信息添加到orderInfo中。
		orderInfo.setUserId(user.getId());
		orderInfo.setUsername(user.getUsername());

		/**
		 * address信息完善
		 */
		address.setUserId(user.getId());
		address.setCreatedTime(new Date());
		// 默认国家是United State
		if (address.getCountry() == null || address.getCountry().length() == 0) {
			address.setCountry(DEFAULT_COUNTRY);
		}

		MeitaoResult meitaoResult = orderValidation(orderInfo, address);
		if (!Integer.valueOf(200).equals(meitaoResult.getStatus())) {
			return meitaoResult;
		}

		// address加入数据库
		if (address.getId() == null) {
			addressMapper.insert(address);
		}
		Long addressId = address.getId();
		if (addressId != null) {
			orderInfo.setAddressId(addressId);
		}

		// 订单加入数据库
		orderMapper.insert(orderInfo);

		// 订单明细表加入数据库
		List<MeitaoOrderItem> orderItems = orderInfo.getOrderItems();
		for (MeitaoOrderItem meitaoOrderItem : orderItems) {
			// 生成明细id
			Long orderItemId = jedisClient.incr(ORDER_DETAIL_ID_GEN_KEY);
			// 补全pojo的属性
			meitaoOrderItem.setId(orderItemId);
			meitaoOrderItem.setOrderId(orderId);
			// 向明细表插入数据
			orderItemMapper.insert(meitaoOrderItem);
		}

		// 返回MeitaoResult，包含订单号
		return MeitaoResult.ok(orderId);
	}

	private MeitaoResult orderValidation(OrderInfo orderInfo, MeitaoAddress address) {
		// 1.orderInfo信息校验
		if (orderInfo.getUserId() == null) {
			return MeitaoResult.build(303, "无法检测到用户信息，请重新登录");
		}
		if (orderInfo.getPaymentType() == null) {
			return MeitaoResult.build(303, "支付方式错误，请重新选择支付方式");
		}
		if (orderInfo.getOrderItems() == null || orderInfo.getOrderItems().size() == 0) {
			return MeitaoResult.build(303, "购物车为空，请添加商品");
		}

		// 2.address信息校验
		if (address.getStreet() == null) {
			return MeitaoResult.build(303, "无 street 信息");
		}
		if (address.getCity() == null) {
			return MeitaoResult.build(303, "无 city 信息");
		}
		if (address.getState() == null) {
			return MeitaoResult.build(303, "无 state 信息");
		}
		if (address.getZipcode() == null) {
			return MeitaoResult.build(303, "无 zipcode 信息");
		}

		// 3.价格验证
		if (!priceValidation(orderInfo)) {
			return MeitaoResult.build(403, "无法支付， 请稍候重试！");
		}

		return MeitaoResult.ok();
	}

	private boolean priceValidation(OrderInfo orderInfo) {
		int subtotalFromDatabase = 0;
		List<MeitaoOrderItem> orderItemList = orderInfo.getOrderItems();
		for (MeitaoOrderItem orderItem : orderItemList) {
			MeitaoItemPrice meitaoItemPrice = itemPriceMapper.selectByPrimaryKey(orderItem.getItemId());
			subtotalFromDatabase += meitaoItemPrice.getSalePrice() * orderItem.getItemNumber();
		}
		return orderInfo.getSubtotal() != null && subtotalFromDatabase == orderInfo.getSubtotal();
	}

	@Override
	public OrderInfo getOrderInfo(List<CartItem> cartItemList, MeitaoUser meitaoUser) {
		// TODO Auto-generated method stub
		Long subtotal = 0L;
		Long taxFee = TaxUtils.getTaxFee();
		Long shippingFee = ShippingUtils.getShippingFee();

		for (CartItem cartItem : cartItemList) {
			subtotal += cartItem.getSalePrice() * cartItem.getPurchaseQuantity();
		}

		OrderInfo orderInfo = OrderInfoBuilder.getInstance().setSubtotal(subtotal).setShippingFee(shippingFee)
				.setTaxFee(taxFee).setUserId(meitaoUser.getId()).setUsername(meitaoUser.getUsername()).build();
		return orderInfo;
	}

	@Override
	public List<MeitaoAddress> getAddressList(Long userId) {
		// TODO Auto-generated method stub
		MeitaoAddressExample example = new MeitaoAddressExample();
		example.setOrderByClause("created_time");
		Criteria criteria = example.createCriteria();
		criteria.andUserIdEqualTo(userId);
		List<MeitaoAddress> list = addressMapper.selectByExample(example);

		// 把默认地址放在第一个
		for (int i = 0; i < list.size(); i++) {
			MeitaoAddress curAddress = list.get(i);
			if (curAddress != null && Boolean.TRUE.equals(curAddress.getIsMain())) {
				Collections.swap(list, i, 0);
				break;
			}
		}

		return list;
	}

	@Override
	public List<MeitaoOrder> getOrderList() {
		MeitaoOrderExample example = new MeitaoOrderExample();
		List<MeitaoOrder> list = orderMapper.selectByExample(example);
		return list;
	}

	@Override
	public EasyUIDataGridResult getOrderList(int page, int rows) {
		PageHelper.startPage(page, rows);
		// 执行查询
		/*
		 * MeitaoItemExample example = new MeitaoItemExample(); List<MeitaoItem>
		 * list = itemMapper.selectByExample(example);
		 */
		List<MeitaoOrder> list = getOrderList();
		// 创建一个返回值对象
		EasyUIDataGridResult result = new EasyUIDataGridResult();
		result.setRows(list);
		// 取分页结果
		PageInfo<MeitaoOrder> pageInfo = new PageInfo<>(list);
		// 取总记录数
		long total = pageInfo.getTotal();
		result.setTotal(total);
		return result;
	}

	@Override
	public EasyUIDataGridResult getOrderItemList(int page, int rows) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public List<MeitaoOrderItem> getOrderItemList() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public List<OrderInfo> getOrderInfoListByUserId(Long userId) {
		// TODO Auto-generated method stub
		List<OrderInfo> result = new ArrayList<>();
		List<MeitaoOrder> meitaoOrderList = getOrderListByUserId(userId);
		for (MeitaoOrder meitaoOrder : meitaoOrderList) {
			List<MeitaoOrderItem> meitaoOrderItemList = getOrderItemListByOrderId(meitaoOrder.getId());
			OrderInfo orderInfo = createOrderInfo(meitaoOrder, meitaoOrderItemList);
			result.add(orderInfo);
		}

		return result;
	}

	private OrderInfo createOrderInfo(MeitaoOrder meitaoOrder, List<MeitaoOrderItem> meitaoOrderItemList) {
		OrderInfo orderInfo = OrderInfoBuilder.getInstance().setOrderId(meitaoOrder.getId())
				.setSubtotal(meitaoOrder.getSubtotal()).setPaymentType(meitaoOrder.getPaymentType())
				.setShippingFee(meitaoOrder.getShippingFee()).setTaxFee(meitaoOrder.getTaxFee())
				.setStatus(meitaoOrder.getStatus()).setCreatedTime(meitaoOrder.getCreatedTime())
				.setUpdatedTime(meitaoOrder.getUpdatedTime()).setPaymentTime(meitaoOrder.getPaymentTime())
				.setConsignTime(meitaoOrder.getConsignTime()).setEndTime(meitaoOrder.getEndTime())
				.setCloseTime(meitaoOrder.getCloseTime()).setShippingName(meitaoOrder.getShippingName())
				.setShippingCode(meitaoOrder.getShippingCode()).setUserId(meitaoOrder.getUserId())
				.setUserComment(meitaoOrder.getUserComment()).setUsername(meitaoOrder.getUsername())
				.setOrderItems(meitaoOrderItemList).build();
		return orderInfo;
	}

	private List<MeitaoOrder> getOrderListByUserId(Long userId) {
		MeitaoOrderExample example = new MeitaoOrderExample();
		com.meitaomart.pojo.MeitaoOrderExample.Criteria criteria = example.createCriteria();
		criteria.andUserIdEqualTo(userId);
		List<MeitaoOrder> list = orderMapper.selectByExample(example);
		return list;
	}

	private List<MeitaoOrderItem> getOrderItemListByOrderId(Long orderId) {
		MeitaoOrderItemExample example = new MeitaoOrderItemExample();
		com.meitaomart.pojo.MeitaoOrderItemExample.Criteria criteria = example.createCriteria();
		criteria.andOrderIdEqualTo(orderId);
		List<MeitaoOrderItem> list = orderItemMapper.selectByExample(example);
		return list;
	}

	@Override
	public MeitaoResult addNewAddress(MeitaoAddress meitaoAddress, Long userId) {
		meitaoAddress.setCountry(DEFAULT_COUNTRY);
		meitaoAddress.setUserId(userId);
		meitaoAddress.setCreatedTime(new Date());
		addressMapper.insert(meitaoAddress);
		return MeitaoResult.ok(meitaoAddress);
	}

	@Override
	public List<MeitaoBankingCard> getCardList(Long userId) {
		MeitaoBankingCardExample example = new MeitaoBankingCardExample();
		example.setOrderByClause("created_time");
		com.meitaomart.pojo.MeitaoBankingCardExample.Criteria criteria = example.createCriteria();
		criteria.andUserIdEqualTo(userId);
		List<MeitaoBankingCard> list = cardMapper.selectByExample(example);

		// 把默认地址放在第一个
		for (int i = 0; i < list.size(); i++) {
			MeitaoBankingCard curCard = list.get(i);
			if (curCard != null && Boolean.TRUE.equals(curCard.getIsMain())) {
				Collections.swap(list, i, 0);
				break;
			}
		}

		return list;
	}

	@Override
	public MeitaoResult addNewCard(MeitaoBankingCard card, Long userId) {
		MeitaoResult checkResult
		card.setUserId(userId);
		card.setCreatedTime(new Date());
		card.setUpdatedTime(new Date());
		cardMapper.insert(card);
		return MeitaoResult.ok(card);
	}
	
	private MeitaoResult cardValidation(MeitaoBankingCard card) {
		String checkResult = PaymentUtils.checkCard(card.getCardNumber().toString(), card.getMonth().toString(), card.getYear().toString());
		if (checkResult.length() > 0) {
			MeitaoResult.build(201, checkResult);
		}
		
		return MeitaoResult.ok();
	}

	@Override
	public MeitaoResult finalPaymentValidation(MeitaoUser user, MeitaoAddress shippingAddress,
			MeitaoAddress billingAddress, MeitaoBankingCard card, OrderInfo orderInfo,
			List<MeitaoOrderItem> orderItemList) {

		MeitaoResult orderItemListValidationResult = orderItemListValidation(orderItemList, user);
		if (!Integer.valueOf(200).equals(orderItemListValidationResult.getStatus())) {
			return orderItemListValidationResult;
		}

		return MeitaoResult.ok();
	}

	/**
	 * 订单商品列表的校验(库存数量校验和与购物车一致性校验)
	 * 
	 * @param orderItemList
	 * @return
	 */
	private MeitaoResult orderItemListValidation(List<MeitaoOrderItem> orderItemList, MeitaoUser user) {
		if (orderItemList == null || orderItemList.size() == 0) {
			return MeitaoResult.build(201, "无商品信息！");
		}

		/*
		 * 库存数量校验
		 */
		StringBuilder outOfStockList = new StringBuilder();
		for (MeitaoOrderItem orderItem : orderItemList) {
			Long itemId = orderItem.getItemId();
			Integer itemNumber = orderItem.getItemNumber();

			if (itemId == null || itemNumber == null) {
				return MeitaoResult.build(201, "商品信息错误！");
			}

			Integer stockNumber = itemMapper.selectStockNumberByPrimaryKey(itemId);
			if (stockNumber == null) {
				System.out.println("数据库信息异常");
			}

			if (itemNumber.compareTo(stockNumber) > 0) {
				String itemName = itemMapper.selectItemNameByPrimaryKey(itemId);
				outOfStockList.append("\n" + itemName);
			}
		}

		if (outOfStockList.length() > 0) {
			String msg = "以下商品库存不足： " + outOfStockList.toString();
			return MeitaoResult.build(201, msg);
		}

		/*
		 * 与购物车一致性校验
		 */
		List<CartItem> cartItemList = getCartList(user.getId());
		if (!itemLastComparator(cartItemList, orderItemList)) {
			return MeitaoResult.build(201, "您的购物车有更新， 已将您的购物车商品更新到订单商品！");
		}
		return MeitaoResult.ok();
	}
	
	private boolean itemLastComparator(List<CartItem> cartItemList, List<MeitaoOrderItem> orderItemList) {
		if (cartItemList.size() != orderItemList.size()) {
			return false;
		}
		
		Collections.sort(cartItemList, new Comparator<CartItem>(){

			@Override
			public int compare(CartItem item1, CartItem item2) {
				if (item1.getId().equals(item2.getId())) {
					return 0;
				}
				
				return item1.getId() < item2.getId() ? -1 : 1;
			}
			
		});
		Collections.sort(orderItemList, new Comparator<MeitaoOrderItem>() {
			@Override
			public int compare(MeitaoOrderItem item1, MeitaoOrderItem item2) {
				if (item1.getId().equals(item2.getId())) {
					return 0;
				}
				
				return item1.getId() < item2.getId() ? -1 : 1;
			}
		});
		
		int size = cartItemList.size();
		for (int i = 0; i < size; i++) {
			CartItem cartItem = cartItemList.get(i);
			MeitaoOrderItem orderItem = orderItemList.get(i);
			if (!cartItem.getId().equals(orderItem.getItemId()) || !Integer.valueOf(cartItem.getPurchaseQuantity()).equals(orderItem.getItemNumber())) {
				return false;
			}
		}
		return true;
	}

	private List<CartItem> getCartList(long userId) {
		// 根据用户id查询购车列表
		List<String> jsonList = jedisClient.hvals(REDIS_CART_PRE + ":" + userId);
		List<CartItem> cartItemList = new ArrayList<>();
		for (String string : jsonList) {
			// 创建一个TbItem对象
			CartItem cartItem = JsonUtils.jsonToPojo(string, CartItem.class);
			// 添加到列表
			cartItemList.add(cartItem);
		}
		return cartItemList;
	}
}
