package com.meitaomart.user.service.impl;

import java.util.Collections;
import java.util.Date;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import org.springframework.util.DigestUtils;

import com.meitaomart.common.utils.MeitaoResult;
import com.meitaomart.common.utils.PaymentUtils;
import com.meitaomart.mapper.MeitaoAddressMapper;
import com.meitaomart.mapper.MeitaoBankingCardMapper;
import com.meitaomart.mapper.MeitaoUserMapper;
import com.meitaomart.pojo.MeitaoAddress;
import com.meitaomart.pojo.MeitaoAddressExample;
import com.meitaomart.pojo.MeitaoAddressExample.Criteria;
import com.meitaomart.pojo.MeitaoBankingCard;
import com.meitaomart.pojo.MeitaoBankingCardExample;
import com.meitaomart.pojo.MeitaoUser;
import com.meitaomart.pojo.MeitaoUserExample;
import com.meitaomart.user.service.UserService;

@Service
public class UserServiceImpl implements UserService {
	@Autowired
	private MeitaoUserMapper meitaoUserMapper;
	@Autowired
	private MeitaoAddressMapper meitaoAddressMapper;
	@Autowired
	private MeitaoBankingCardMapper meitaoCardMapper;
	
	@Value("${ADDRESS_TYPE}")
	private String ADDRESS_TYPE;
	@Value("${CARD_TYPE}")
	private String CARD_TYPE;
	@Value("${DEFAULT_COUNTRY}")
	private String DEFAULT_COUNTRY;

	@Override
	public MeitaoResult changePassword(String emailAddress, String newPassword) {
		MeitaoUserExample example = new MeitaoUserExample();
		com.meitaomart.pojo.MeitaoUserExample.Criteria criteria = example.createCriteria();
		criteria.andEmailEqualTo(emailAddress);
		List<MeitaoUser> meitaoUserList = meitaoUserMapper.selectByExample(example);
		if (meitaoUserList == null || meitaoUserList.size() == 0) {
			return MeitaoResult.build(201, "此邮箱不存在！请更换邮箱");
		}
		Long userId = meitaoUserList.get(0).getId();
		String md5Pass = DigestUtils.md5DigestAsHex(newPassword.getBytes());
		meitaoUserMapper.updatePasswordByPrimaryKey(md5Pass, userId);
		return MeitaoResult.ok();
	}
	
	@Override
	public MeitaoResult changePassword(Long userId, String oldPassword, String newPassword) {
		MeitaoUser user = meitaoUserMapper.selectByPrimaryKey(userId);
		if (!DigestUtils.md5DigestAsHex(oldPassword.getBytes()).equals(user.getPassword())) {
			return MeitaoResult.build(400, "旧密码错误");
		}
		
		String md5Pass = DigestUtils.md5DigestAsHex(newPassword.getBytes());
		meitaoUserMapper.updatePasswordByPrimaryKey(md5Pass, userId);
		return MeitaoResult.ok();
	}

	@Override
	public MeitaoUser getUserByPrimaryId(Long userId) {
		// TODO Auto-generated method stub
		MeitaoUser meitaoUser = meitaoUserMapper.selectByPrimaryKey(userId);
		return meitaoUser;
	}

	@Override
	public List<MeitaoAddress> getAddressListByUserId(Long userId) {
		// TODO Auto-generated method stub
		MeitaoAddressExample example = new MeitaoAddressExample();
		example.setOrderByClause("created_time");
		Criteria criteria = example.createCriteria();
		criteria.andUserIdEqualTo(userId);
		List<MeitaoAddress> list = meitaoAddressMapper.selectByExample(example);

		// 把默认地址放在第一个
		for (int i = 0; i < list.size(); i++) {
			MeitaoAddress curAddress = list.get(i);
			if (curAddress != null && Boolean.TRUE.equals(curAddress.getIsMain())) {
				Collections.swap(list, i, 0);
				break;
			}
		}
		return list;
	}

	@Override
	public MeitaoUser updateUser(MeitaoUser user, Long userId) {
		MeitaoUserExample example = new MeitaoUserExample();
		com.meitaomart.pojo.MeitaoUserExample.Criteria criteria = example.createCriteria();
		criteria.andIdEqualTo(userId);

		user.setUpdatedTime(new Date());
		if (user.getPhone() != null && user.getPhone().length() == 0) {
			user.setPhone(null);
		}

		meitaoUserMapper.updateByExampleSelective(user, example);
		if (user.getSex() == null) {
			meitaoUserMapper.updateSexByPrimaryKey(null, userId);
		}
		
		MeitaoUser updatedUser = getUserByPrimaryId(userId);
		return updatedUser;
	}

	@Override
	public List<MeitaoBankingCard> getCardListByUserId(Long userId) {
		MeitaoBankingCardExample example = new MeitaoBankingCardExample();
		example.setOrderByClause("created_time");
		com.meitaomart.pojo.MeitaoBankingCardExample.Criteria criteria = example.createCriteria();
		criteria.andUserIdEqualTo(userId);
		List<MeitaoBankingCard> list = meitaoCardMapper.selectByExample(example);

		// 把默认地址放在第一个
		for (int i = 0; i < list.size(); i++) {
			MeitaoBankingCard curCard = list.get(i);
			if (curCard != null && Boolean.TRUE.equals(curCard.getIsMain())) {
				Collections.swap(list, i, 0);
				break;
			}
		}

		return list;
	}

	@Override
	public MeitaoResult setAsDefault(Long id, String type, Long userId) {
		// TODO Auto-generated method stub
		if (ADDRESS_TYPE.equals(type)) {
			MeitaoAddress meitaoAddress = getDefaultAddressByUserId(userId);
			if (meitaoAddress != null) {
				meitaoAddressMapper.setAsDefaultByPrimaryKey(false, meitaoAddress.getId());
			}
			meitaoAddressMapper.setAsDefaultByPrimaryKey(true, id);
		} else if (CARD_TYPE.equals(type)) {
			MeitaoBankingCard meitaoCard = getDefaultCardByUserId(userId);
			if (meitaoCard != null) {
				meitaoCardMapper.setAsDefaultByPrimaryKey(false, meitaoCard.getId());
			}
			meitaoCardMapper.setAsDefaultByPrimaryKey(true, id);
		} else {
			System.out.println("设置默认出错: 无相应类别");
		}
		
		return MeitaoResult.ok();
	}
	
	private MeitaoAddress getDefaultAddressByUserId(Long userId) {
		MeitaoAddressExample example = new MeitaoAddressExample();
		Criteria criteria = example.createCriteria();
		criteria.andUserIdEqualTo(userId).andIsMainEqualTo(Boolean.TRUE);
		List<MeitaoAddress> list = meitaoAddressMapper.selectByExample(example);
		return list.size() > 0 ? list.get(0) : null;
	}
	
	private MeitaoBankingCard getDefaultCardByUserId(Long userId) {
		MeitaoBankingCardExample example = new MeitaoBankingCardExample();
		com.meitaomart.pojo.MeitaoBankingCardExample.Criteria criteria = example.createCriteria();
		criteria.andUserIdEqualTo(userId).andIsMainEqualTo(Boolean.TRUE);
		List<MeitaoBankingCard> list = meitaoCardMapper.selectByExample(example);
		return list.size() > 0 ? list.get(0) : null;
	}

	@Override
	public MeitaoAddress getAddressByPrimaryId(Long id) {
		return meitaoAddressMapper.selectByPrimaryKey(id);
	}

	@Override
	public MeitaoBankingCard getCardByPrimaryId(Long id) {
		return meitaoCardMapper.selectByPrimaryKey(id);
	}

	@Override
	public MeitaoResult deleteOne(Long id, String type, Long userId) {
		if (ADDRESS_TYPE.equals(type)) {
			MeitaoAddressExample example = new MeitaoAddressExample();
			Criteria criteria = example.createCriteria();
			criteria.andUserIdEqualTo(userId).andIdEqualTo(id);
			meitaoAddressMapper.deleteByExample(example);
		} else if (CARD_TYPE.equals(type)) {
			MeitaoBankingCardExample example = new MeitaoBankingCardExample();
			com.meitaomart.pojo.MeitaoBankingCardExample.Criteria criteria = example.createCriteria();
			criteria.andUserIdEqualTo(userId).andIdEqualTo(id);
			meitaoCardMapper.deleteByExample(example);
		} else {
			System.out.println("设置默认出错: 无相应类别");
		}
		
		return MeitaoResult.ok();
	}

	@Override
	public MeitaoResult addNewAddress(MeitaoAddress meitaoAddress, Long userId) {
		meitaoAddress.setCountry(DEFAULT_COUNTRY);
		meitaoAddress.setUserId(userId);
		meitaoAddress.setCreatedTime(new Date());
		meitaoAddressMapper.insert(meitaoAddress);
		return MeitaoResult.ok(meitaoAddress);
	}
	
	@Override
	public MeitaoResult addNewCard(MeitaoBankingCard card, Long userId) {
		MeitaoResult checkResult = cardValidation(card);
		if (!Integer.valueOf(200).equals(checkResult.getStatus())) {
			return checkResult;
		}
		card.setUserId(userId);
		card.setCreatedTime(new Date());
		card.setUpdatedTime(new Date());
		meitaoCardMapper.insert(card);
		return MeitaoResult.ok(card);
	}
	
	private MeitaoResult cardValidation(MeitaoBankingCard card) {
		String checkResultMessage = PaymentUtils.checkCard(card.getCardNumber().toString(), card.getMonth(), card.getYear());
		if (checkResultMessage.length() > 0) {
			return MeitaoResult.build(201, checkResultMessage);
		}
		
		return MeitaoResult.ok();
	}

	@Override
	public MeitaoResult updateAddress(MeitaoAddress address, Long addressId, Long userId) {
		MeitaoAddressExample example = new MeitaoAddressExample();
		Criteria criteria = example.createCriteria();
		criteria.andUserIdEqualTo(userId).andIdEqualTo(addressId);
		meitaoAddressMapper.updateByExampleSelective(address, example);
		return MeitaoResult.ok();
	}

	@Override
	public MeitaoResult updateCard(MeitaoBankingCard card, Long addressId, Long userId) {
		MeitaoResult checkResult = cardValidation(card);
		if (!Integer.valueOf(200).equals(checkResult.getStatus())) {
			return checkResult;
		}
		MeitaoBankingCardExample example = new MeitaoBankingCardExample();
		com.meitaomart.pojo.MeitaoBankingCardExample.Criteria criteria = example.createCriteria();
		criteria.andUserIdEqualTo(userId);
		meitaoCardMapper.updateByExampleSelective(card, example);
		return MeitaoResult.ok(card);
	}

}
